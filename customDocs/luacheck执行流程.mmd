Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# main\.lua
> borderColor=`#3949AB`,collapsed=`true`,fillColor=`#3949AB`,textColor=`#FFFFFF`


## require各种文件
> textColor=`#141414`


### luacheck/init\.lua
> textColor=`#141414`


#### check\.lua
> textColor=`#141414`


##### check
> textColor=`#141414`


###### 创建check\_state
> textColor=`#141414`


###### 调用stages/init\.lua 里定义的states\.run\(\)
> textColor=`#141414`


####### 这里的stages按照从上往下的顺序运行
> collapsed=`true`,textColor=`#141414`


######## 预处理过程
> collapsed=`true`,textColor=`#141414`


######### parse
> collapsed=`true`,textColor=`#141414`


########## 解析代码，把字节数据代表的代码解析出各个字段供后续的stages使用
> collapsed=`true`,textColor=`#141414`


########### 创建 newstate，本质上是一个table 包含后面的内容
> collapsed=`true`,textColor=`#141414`


############ lexer
> textColor=`#141414`


############ code\_lines
> textColor=`#141414`


############ line\_endings
> textColor=`#141414`


############ comments
> textColor=`#141414`


############ hanging\_semicolons
> textColor=`#141414`


########### skip\_token
> collapsed=`true`,textColor=`#141414`


############ 把字符串分割为一个个token
> textColor=`#141414`


########### parse\_block
> collapsed=`true`,textColor=`#141414`


############ state中遍历语句块，写了end/eof/else/elseif/until 作为语句块的结束
> textColor=`#141414`


############ parse\_function，会把node节点的数据设置为\{参数列表，body,end\_range,tag==Funtion\}
> textColor=`#141414`


######### unwrap\_parens
> collapsed=`true`,textColor=`#141414`


########## Mutates AST, unwrapping Paren nodes，好像只是设置node的父子层级关系
> textColor=`#141414`


######### linearrize
> collapsed=`true`,textColor=`#141414`


########## Builds linear representation \(line\) of AST and assigns it as \`chstate\.top\_line\`\.
> collapsed=`true`,textColor=`#141414`


########### 构建AST的线性表达
> collapsed=`true`,textColor=`#141414`


############ accessed\_upvalues 取值map
> textColor=`#141414`


############ mutated\_upvalues 修改upvalue记录
> textColor=`#141414`


############ set\_upvalues 设置值的map
> textColor=`#141414`


############ lines
> textColor=`#141414`


############ scopes
> textColor=`#141414`


########### 给chstate\.lines赋值
> collapsed=`true`,textColor=`#141414`


############ 每一行有逻辑代码的都会在存在这个lines数组
> textColor=`#141414`


########### 对 重定义/shadowed local 变量或者没用的labels进行警告
> textColor=`#141414`


########## Assings an array of all lines as \`chstate\.lines\`\.
> textColor=`#141414`


########## Adds warnings for redefined/shadowed locals and unused labels\.
> textColor=`#141414`


######### parse\_inline\_options
> textColor=`#141414`


######### name\_functions
> collapsed=`true`,textColor=`#141414`


########## 这里只是对节点进行命名\(name
> textColor=`#141414`


######### resolve\_locals
> textColor=`#141414`


######## detect\_bag\_whitespace
> textColor=`#141414`


######## detect\_cylomatic\_complexity
> textColor=`#141414`


######## detect\_empty\_blocks
> textColor=`#141414`


######## detect\_empty\_statements
> textColor=`#141414`


######## detect\_globals
> textColor=`#141414`


######## detect\_reversed\_for\_num\_loops
> textColor=`#141414`


######## detect\_balanced\_assignments
> textColor=`#141414`


######## detect\_uninit\_accesses
> textColor=`#141414`


######## detect\_unreachable\_code
> textColor=`#141414`


######## detect\_unused\_fields
> textColor=`#141414`


######## detect\_unused\_locals
> textColor=`#141414`


##  通过parser\.lua模块解析命令行参数，<br/>解析得到一个args数据，作为后面的检测逻辑的配置
> textColor=`#141414`


### parser\.parse\(\)会产出的内容
> textColor=`#141414`


#### ast 抽象语法树 \(Abstract Syntax Tree\)
> collapsed=`true`,textColor=`#141414`


##### AST 的应用很广泛，比如代码补全等，<br/>也是这里代码分析的核心
> textColor=`#141414`


#### comments 文件中的注释相关信息
> textColor=`#141414`


#### code\_lines
> collapsed=`true`,textColor=`#141414`


##### 存的是哪一行有代码的列表，有代码的会有key为行号，value 为 bool值为true
> textColor=`#141414`


##### 没有代码行号不会出现在列表里
> textColor=`#141414`


##### 注释的行，也算没有代码
> textColor=`#141414`


#### line\_endings
> collapsed=`true`,textColor=`#141414`


##### 好像只有注释的行才会出现在这里列表里面
> textColor=`#141414`


##### 列表里面的每一项的key是行号，value是 "comment" 或者 "string"两个字符串，<br/>但我怎么设置都只会出现 comment，写一行字符串，并不会除
> textColor=`#141414`


#### useless\_semicolons
> collapsed=`true`,textColor=`#141414`


##### 顾名思义，记录的是没有用的';' 所在的位置信息
> textColor=`#141414`


## runner\.lua  的runner\.new 获取一个checker实例
> textColor=`#141414`


## 根据args的参数转化成要检测的inputs列表，执行 checker:check\(inputs\)
> textColor=`#141414`


### \_prepare\_inputs\(inputs\)
> textColor=`#141414`


#### 根据exclude\_files 和include\_files进行输入筛选
> textColor=`#141414`


### \_get\_reports
> textColor=`#141414`


## 拿到checker:check\(\)的结果，进行结果输出
> textColor=`#141414`

